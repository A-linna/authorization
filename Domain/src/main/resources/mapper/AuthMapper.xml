<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wingliberty.authorization.domain.aggregateauth.repository.mappeer.AuthMapper">
    <resultMap id="BaseResultMap" type="com.wingliberty.authorization.domain.aggregateauth.entity.AuthEntity">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="user_name" jdbcType="VARCHAR" property="userName"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="access_token" jdbcType="VARCHAR" property="accessToken"/>
        <result column="refresh_token" jdbcType="VARCHAR" property="refreshToken"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        id
        , user_name, password, phone, status, access_token, refresh_token, create_time,
    update_time
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from auth
        where id = #{id,jdbcType=BIGINT}
    </select>
    <select id="findByUserName"
            resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from auth where user_name=#{userName}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        delete
        from auth
        where id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" parameterType="com.wingliberty.authorization.domain.aggregateauth.entity.AuthEntity">
        insert into auth (id, user_name, password,
                          phone, status, access_token,
                          refresh_token, create_time, update_time)
        values (#{id,jdbcType=BIGINT}, #{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
                #{phone,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{accessToken,jdbcType=VARCHAR},
                #{refreshToken,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
    </insert>
    <insert id="insertSelective" parameterType="com.wingliberty.authorization.domain.aggregateauth.entity.AuthEntity">
        insert into auth
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="userName != null">
                user_name,
            </if>
            <if test="password != null">
                password,
            </if>
            <if test="phone != null">
                phone,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="accessToken != null">
                access_token,
            </if>
            <if test="refreshToken != null">
                refresh_token,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=BIGINT},
            </if>
            <if test="userName != null">
                #{userName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                #{password,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="accessToken != null">
                #{accessToken,jdbcType=VARCHAR},
            </if>
            <if test="refreshToken != null">
                #{refreshToken,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective"
            parameterType="com.wingliberty.authorization.domain.aggregateauth.entity.AuthEntity">
        update auth
        <set>
            <if test="userName != null">
                user_name = #{userName,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="accessToken != null">
                access_token = #{accessToken,jdbcType=VARCHAR},
            </if>
            <if test="refreshToken != null">
                refresh_token = #{refreshToken,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey"
            parameterType="com.wingliberty.authorization.domain.aggregateauth.entity.AuthEntity">
        update auth
        set user_name     = #{userName,jdbcType=VARCHAR},
            password      = #{password,jdbcType=VARCHAR},
            phone         = #{phone,jdbcType=VARCHAR},
            status        = #{status,jdbcType=VARCHAR},
            access_token  = #{accessToken,jdbcType=VARCHAR},
            refresh_token = #{refreshToken,jdbcType=VARCHAR},
            create_time   = #{createTime,jdbcType=TIMESTAMP},
            update_time   = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=BIGINT}
    </update>
</mapper>